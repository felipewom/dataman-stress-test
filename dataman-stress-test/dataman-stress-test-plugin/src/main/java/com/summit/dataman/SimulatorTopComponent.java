/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.summit.dataman;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketTimeoutException;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.atomic.AtomicBoolean;
import javax.swing.*;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//com.summit.dataman//Simulator//EN",
autostore = false)
@TopComponent.Description(preferredID = "DataMan Simulator",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ONLY_OPENED)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "com.summit.dataman.SimulatorTopComponent")
@ActionReference(path = "Menu/Window",
position = 333)
@TopComponent.OpenActionRegistration(displayName = "#CTL_SimulatorAction",
preferredID = "SimulatorTopComponent")
@Messages({
    "CTL_SimulatorAction=Simulator",
    "CTL_SimulatorTopComponent=Simulator Window",
    "HINT_SimulatorTopComponent=This is a Simulator window"
})
public final class SimulatorTopComponent extends TopComponent {

    public SimulatorTopComponent() {
        initComponents();
        setName(Bundle.CTL_SimulatorTopComponent());
        setToolTipText(Bundle.HINT_SimulatorTopComponent());
        putClientProperty(TopComponent.PROP_DRAGGING_DISABLED, Boolean.TRUE);

    }
    private List<Socket> sockets = Collections.synchronizedList(new LinkedList<Socket>());
    private ServerSocket ss;
    private ServerThread serverThread;
    //No cap here, be nice.
    private ExecutorService executor = Executors.newCachedThreadPool(new ThreadFactory() {

        int count = 0;

        @Override
        public Thread newThread(Runnable r) {
            count++;
            Thread t = new Thread(r, "Conn-" + count);
            return t;
        }
    });

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSpinner1 = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        totalTextArea = new javax.swing.JTextArea();
        jButton3 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();

        jSpinner1.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(23), null, Integer.valueOf(65535), Integer.valueOf(1)));

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(SimulatorTopComponent.class, "SimulatorTopComponent.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(SimulatorTopComponent.class, "SimulatorTopComponent.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jButton2, org.openide.util.NbBundle.getMessage(SimulatorTopComponent.class, "SimulatorTopComponent.jButton2.text")); // NOI18N
        jButton2.setEnabled(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        totalTextArea.setColumns(20);
        totalTextArea.setRows(5);
        jScrollPane1.setViewportView(totalTextArea);

        org.openide.awt.Mnemonics.setLocalizedText(jButton3, org.openide.util.NbBundle.getMessage(SimulatorTopComponent.class, "SimulatorTopComponent.jButton3.text")); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 441, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton3)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addContainerGap())
        );

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(SimulatorTopComponent.class, "SimulatorTopComponent.jPanel1.TabConstraints.tabTitle"), jPanel1); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(SimulatorTopComponent.class, "SimulatorTopComponent.jLabel2.text")); // NOI18N

        jTextField1.setText(org.openide.util.NbBundle.getMessage(SimulatorTopComponent.class, "SimulatorTopComponent.jTextField1.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            ss = new ServerSocket((Integer) jSpinner1.getValue());
            ss.setSoTimeout(200);

            serverThread = new ServerThread(ss);
            new Thread(serverThread).start();

            jButton1.setEnabled(false);
            jButton2.setEnabled(true);
        } catch (Exception ex) {
            Exceptions.printStackTrace(ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        serverThread.stopRunning();

        jButton1.setEnabled(true);
        jButton2.setEnabled(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        totalTextArea.setText("");
    }//GEN-LAST:event_jButton3ActionPerformed

    @Override
    protected void componentClosed() {
        super.componentClosed();
        if (serverThread != null) {
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextArea totalTextArea;
    // End of variables declaration//GEN-END:variables

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    private class ServerThread implements Runnable {

        private ServerSocket ss;
        private AtomicBoolean keepRunning = new AtomicBoolean(true);

        public ServerThread(ServerSocket ss) {
            this.ss = ss;
        }

        @Override
        public void run() {
            try {
                int count = 0;
                while (keepRunning.get()) {
                    try {
                        Socket s = ss.accept();
                        count++;
                        executor.submit(new SocketThread(s,count));
                        sockets.add(s);
                    } catch (SocketTimeoutException ste) {
                        continue;
                    }
                }
            } catch (Exception ex) {
            } finally {
                try {
                    for (Socket s : sockets) {
                        s.close();
                    }
                    sockets.clear();
                    ss.close();
                } catch (Exception ex) {
                    Exceptions.printStackTrace(ex);
                }
            }
        }

        public void stopRunning() {
            keepRunning.set(false);
        }
    }

    private class SocketThread implements Runnable {

        Socket s;
        JPanel panel;
        JTextArea textArea;
        JButton clearBtn;
        String threadName;
        int count;
        
        public SocketThread(Socket s, int count) {
            this.s = s;
            this.count = count;
        }

        @Override
        public void run() {
            try {
                threadName = Thread.currentThread().getName();
                SwingUtilities.invokeAndWait(new Runnable() {

                    @Override
                    public void run() {
                        panel = new JPanel(new BorderLayout());
                        jTabbedPane1.add(threadName + "_" + count, panel);
                        textArea = new JTextArea();
                        clearBtn = new JButton(new AbstractAction("Clear") {

                            @Override
                            public void actionPerformed(ActionEvent ae) {
                                textArea.setText("");
                            }
                        });
                        panel.add(clearBtn, BorderLayout.SOUTH);
                        panel.add(textArea, BorderLayout.CENTER);
                    }
                });

                BufferedReader in = new BufferedReader(new InputStreamReader(s.getInputStream()));
                BufferedWriter out = new BufferedWriter(new OutputStreamWriter(s.getOutputStream()));
                s.setSoTimeout(200);
                while (s.isConnected()) {
                    try {
                        String line = in.readLine();
                        
                        if(line == null){
                            break;
                        }
                        //Should be thread safe
                        textArea.append("In:\t" + line + "\r\n");
                        totalTextArea.append(count + ": In:\t" + line + "\r\n");
                        if (line.equals(jTextField1.getText().trim())) {
                            final String outText = "0123456789\r\n";
                            out.write(outText);
                            textArea.append("Out:\t" + outText);
                            totalTextArea.append(count + ": Out:\t" + outText);

                            out.flush();
                        }
                    } catch (SocketTimeoutException ste) {
                        continue;
                    }
                }
                if (s.isConnected()) {
                    s.close();
                }
                sockets.remove(s);

                SwingUtilities.invokeLater(new Runnable() {

                    @Override
                    public void run() {
                        jTabbedPane1.remove(panel);
                    }
                });
            } catch (Exception ex) {
                Exceptions.printStackTrace(ex);
            }
        }
    }
}
