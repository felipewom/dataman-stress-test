/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.summit.dataman;

import java.awt.BorderLayout;
import java.io.*;
import java.net.Socket;
import java.net.SocketTimeoutException;
import java.net.UnknownHostException;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicReference;
import java.util.prefs.Preferences;
import javax.swing.SwingUtilities;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.UnknownKeyException;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle.Messages;
import org.openide.util.NbPreferences;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//com.summit.dataman//StressTest//EN",
autostore = false)
@TopComponent.Description(preferredID = "StressTestTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "com.summit.dataman.StressTestTopComponent")
@ActionReference(path = "Menu/Cognex", position = 10)
@TopComponent.OpenActionRegistration(displayName = "#CTL_StressTestAction",
preferredID = "StressTestTopComponent")
@Messages({
    "CTL_StressTestAction=StressTest",
    "CTL_StressTestTopComponent=StressTest Window",
    "HINT_StressTestTopComponent=This is a StressTest window"
})
public final class StressTestTopComponent extends TopComponent {

    public static final String LAST_HOST_KEY = "lastHost";
    Preferences prefs = NbPreferences.forModule(StressTestTopComponent.class);
    ScheduledExecutorService executor;
    XYSeriesCollection dataSet;
    XYSeries currentSeries;
    AtomicInteger currentCount;
    int tryCount = 0;
    JFreeChart chartComponent;
    AtomicReference<Socket> connection = new AtomicReference<Socket>();

    public StressTestTopComponent() {
        initComponents();
        setName(Bundle.CTL_StressTestTopComponent());
        setToolTipText(Bundle.HINT_StressTestTopComponent());
        dataSet = new XYSeriesCollection();
        chartComponent = ChartFactory.createXYBarChart("Tries vs Request Time", "Duration", false,"Count", dataSet, PlotOrientation.VERTICAL, false, false, false);
        chartParentPanel.add(new ChartPanel(chartComponent), BorderLayout.CENTER);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        hostTextField = new javax.swing.JTextField();
        portSpinner = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        startButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        delaySpinner = new javax.swing.JSpinner();
        stopButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        triggerTextField = new javax.swing.JTextField();
        connectionCheckBox = new javax.swing.JCheckBox();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        chartParentPanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        clearGraphButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        cycleCountLabel = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        dataPointCountLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        logTextArea = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        timeoutSpinner = new javax.swing.JSpinner();
        logDialogCheckbox = new javax.swing.JCheckBox();
        precisionSpinner = new javax.swing.JSpinner();
        jLabel9 = new javax.swing.JLabel();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(StressTestTopComponent.class, "StressTestTopComponent.jLabel1.text")); // NOI18N

        hostTextField.setText(prefs.get(LAST_HOST_KEY, "0.0.0.0"));

        portSpinner.setModel(new javax.swing.SpinnerNumberModel(23, 1, 65535, 1));

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(StressTestTopComponent.class, "StressTestTopComponent.jLabel2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(startButton, org.openide.util.NbBundle.getMessage(StressTestTopComponent.class, "StressTestTopComponent.startButton.text")); // NOI18N
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(StressTestTopComponent.class, "StressTestTopComponent.jLabel3.text")); // NOI18N

        delaySpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1000), Integer.valueOf(1), null, Integer.valueOf(1)));

        org.openide.awt.Mnemonics.setLocalizedText(stopButton, org.openide.util.NbBundle.getMessage(StressTestTopComponent.class, "StressTestTopComponent.stopButton.text")); // NOI18N
        stopButton.setEnabled(false);
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(StressTestTopComponent.class, "StressTestTopComponent.jLabel4.text")); // NOI18N

        triggerTextField.setText(org.openide.util.NbBundle.getMessage(StressTestTopComponent.class, "StressTestTopComponent.triggerTextField.text")); // NOI18N

        connectionCheckBox.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(connectionCheckBox, org.openide.util.NbBundle.getMessage(StressTestTopComponent.class, "StressTestTopComponent.connectionCheckBox.text")); // NOI18N

        chartParentPanel.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.BorderLayout());

        org.openide.awt.Mnemonics.setLocalizedText(clearGraphButton, org.openide.util.NbBundle.getMessage(StressTestTopComponent.class, "StressTestTopComponent.clearGraphButton.text")); // NOI18N
        clearGraphButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearGraphButtonActionPerformed(evt);
            }
        });
        jPanel2.add(clearGraphButton, java.awt.BorderLayout.CENTER);

        jLabel7.setFont(new java.awt.Font("Cantarell", 1, 15)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel7, org.openide.util.NbBundle.getMessage(StressTestTopComponent.class, "StressTestTopComponent.jLabel7.text")); // NOI18N
        jPanel3.add(jLabel7);

        org.openide.awt.Mnemonics.setLocalizedText(cycleCountLabel, org.openide.util.NbBundle.getMessage(StressTestTopComponent.class, "StressTestTopComponent.cycleCountLabel.text")); // NOI18N
        jPanel3.add(cycleCountLabel);

        jLabel8.setFont(new java.awt.Font("Cantarell", 1, 15)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel8, org.openide.util.NbBundle.getMessage(StressTestTopComponent.class, "StressTestTopComponent.jLabel8.text")); // NOI18N
        jPanel3.add(jLabel8);

        org.openide.awt.Mnemonics.setLocalizedText(dataPointCountLabel, org.openide.util.NbBundle.getMessage(StressTestTopComponent.class, "StressTestTopComponent.dataPointCountLabel.text")); // NOI18N
        jPanel3.add(dataPointCountLabel);

        jPanel2.add(jPanel3, java.awt.BorderLayout.EAST);

        chartParentPanel.add(jPanel2, java.awt.BorderLayout.SOUTH);

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(StressTestTopComponent.class, "StressTestTopComponent.chartParentPanel.TabConstraints.tabTitle"), chartParentPanel); // NOI18N

        logTextArea.setColumns(20);
        logTextArea.setRows(5);
        jScrollPane1.setViewportView(logTextArea);

        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(StressTestTopComponent.class, "StressTestTopComponent.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 633, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap())
        );

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(StressTestTopComponent.class, "StressTestTopComponent.jPanel1.TabConstraints.tabTitle"), jPanel1); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(StressTestTopComponent.class, "StressTestTopComponent.jLabel5.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel6, org.openide.util.NbBundle.getMessage(StressTestTopComponent.class, "StressTestTopComponent.jLabel6.text")); // NOI18N

        timeoutSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));

        org.openide.awt.Mnemonics.setLocalizedText(logDialogCheckbox, org.openide.util.NbBundle.getMessage(StressTestTopComponent.class, "StressTestTopComponent.logDialogCheckbox.text")); // NOI18N

        precisionSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(5), null, null, Integer.valueOf(1)));

        org.openide.awt.Mnemonics.setLocalizedText(jLabel9, org.openide.util.NbBundle.getMessage(StressTestTopComponent.class, "StressTestTopComponent.jLabel9.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 669, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(hostTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(portSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(delaySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(startButton)
                                    .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(stopButton)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel5))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(triggerTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(connectionCheckBox)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel9)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(precisionSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(timeoutSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(logDialogCheckbox)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(hostTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(portSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(delaySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(triggerTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(connectionCheckBox)
                    .addComponent(precisionSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(timeoutSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(logDialogCheckbox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startButton)
                    .addComponent(stopButton)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        jTabbedPane1.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(StressTestTopComponent.class, "StressTestTopComponent.jTabbedPane1.AccessibleContext.accessibleName")); // NOI18N
    }// </editor-fold>//GEN-END:initComponents

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        tryCount++;
        hostTextField.setEnabled(false);
        prefs.put(LAST_HOST_KEY, hostTextField.getText());

        portSpinner.setEnabled(false);
        connectionCheckBox.setEnabled(false);
        delaySpinner.setEnabled(false);
        triggerTextField.setEnabled(false);
        startButton.setEnabled(false);
        stopButton.setEnabled(true);
        precisionSpinner.setEnabled(false);
        logDialogCheckbox.setEnabled(false);

        timeoutSpinner.setEnabled(false);
        final String seriesKey = "Delay-" + delaySpinner.getValue();
        currentSeries = new XYSeries(seriesKey,true,false);
        cycleCountLabel.setText("0");
        try {
            dataSet.removeSeries(dataSet.getSeries(seriesKey));
        } catch (UnknownKeyException ex) {
            //ignore... JFree should offer a "hasSeries" method.
        }
        dataSet.addSeries(currentSeries);
        clearGraphButton.setEnabled(false);
        currentCount = new AtomicInteger(0);
        executor = Executors.newScheduledThreadPool(1);
        executor.scheduleWithFixedDelay(new SocketThread(hostTextField.getText(), (Integer) portSpinner.getValue(), triggerTextField.getText(), (Integer) timeoutSpinner.getValue(), logDialogCheckbox.isSelected(), connectionCheckBox.isSelected()), 0l, (Integer) delaySpinner.getValue(), TimeUnit.MILLISECONDS);
    }//GEN-LAST:event_startButtonActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        hostTextField.setEnabled(true);
        portSpinner.setEnabled(true);
        logDialogCheckbox.setEnabled(true);
        connectionCheckBox.setEnabled(true);
        delaySpinner.setEnabled(true);
        triggerTextField.setEnabled(true);
        startButton.setEnabled(true);
        stopButton.setEnabled(false);
        timeoutSpinner.setEnabled(true);
        precisionSpinner.setEnabled(true);
        clearGraphButton.setEnabled(true);

        if (connection.get() != null) {
            Socket s = connection.get();
            if (s.isConnected()) {
                try {
                    s.close();
                } catch (IOException ex) {
                    Exceptions.printStackTrace(ex);
                }
            }
        }
        executor.shutdown();
    }//GEN-LAST:event_stopButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        logTextArea.setText("");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void clearGraphButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearGraphButtonActionPerformed
        dataSet.removeAllSeries();
    }//GEN-LAST:event_clearGraphButtonActionPerformed

    private class SocketThread implements Runnable {

        private String host;
        private int port;
        private String trigger;
        private int socketTimeout;
        private boolean appendToLog;
        private boolean connectionPerRequest;
        
        private int precision;

        public SocketThread(String host, int port, String trigger, int socketTimeout, boolean appendToLog, boolean connectionPerRequest) {
            this.host = host;
            this.port = port;
            this.trigger = trigger;
            this.socketTimeout = socketTimeout;
            this.appendToLog = appendToLog;
            this.connectionPerRequest = connectionPerRequest;
            precision = (Integer)precisionSpinner.getValue();
            
        }

        @Override
        public void run() {
            try {
                currentSeries.setNotify(false);
                long startTime = System.currentTimeMillis();
                Socket s = null;

                if (connectionPerRequest) {
                    s = new Socket(host, port);
                    if (socketTimeout > 0) {
                        s.setSoTimeout(socketTimeout);
                    }
                } else {
                    s = connection.get();
                    if (s == null || s.isClosed() || !s.isConnected()) {
                        s = new Socket(host, port);
                        connection.set(s);
                    }
                }

                BufferedReader in = new BufferedReader(new InputStreamReader(s.getInputStream()));
                BufferedWriter out = new BufferedWriter(new OutputStreamWriter(s.getOutputStream()));

                out.write(trigger + "\r\n");
                if (appendToLog) {
                    logTextArea.append("Out:\t" + trigger + "\r\n");
                }
                out.flush();

                String lineIn = "";
                try {
                    lineIn = in.readLine();
                } catch (SocketTimeoutException ste) {
                    lineIn = "SOCKET TIMED OUT!!!";
                }
                long endTime = System.currentTimeMillis();
                final int totalTime = (int)(endTime - startTime);
                final int count = currentCount.incrementAndGet();
                int index = currentSeries.indexOf(totalTime/precision);
                int setToValue;
                if(index < 0){
                    setToValue = 1;
                }else{
                    setToValue = currentSeries.getY(index).intValue()+1;
                }
                
                if(count%5==0){
                    final int dataPointCount = currentSeries.getItemCount();
                    currentSeries.setNotify(true);
                    SwingUtilities.invokeLater(new Runnable() {

                        @Override
                        public void run() {
                            cycleCountLabel.setText(String.valueOf(count));
                            dataPointCountLabel.setText(String.valueOf(dataPointCount));
                        }
                    });
                }
                currentSeries.addOrUpdate(totalTime/precision, setToValue);

                if (appendToLog) {
                    logTextArea.append("In:\t" + lineIn + "\r\n");
                }
                if (connectionPerRequest) {
                    s.close();
                }

            } catch (UnknownHostException ex) {
                Exceptions.printStackTrace(ex);
            } catch (IOException ex) {
                Exceptions.printStackTrace(ex);
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel chartParentPanel;
    private javax.swing.JButton clearGraphButton;
    private javax.swing.JCheckBox connectionCheckBox;
    private javax.swing.JLabel cycleCountLabel;
    private javax.swing.JLabel dataPointCountLabel;
    private javax.swing.JSpinner delaySpinner;
    private javax.swing.JTextField hostTextField;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JCheckBox logDialogCheckbox;
    private javax.swing.JTextArea logTextArea;
    private javax.swing.JSpinner portSpinner;
    private javax.swing.JSpinner precisionSpinner;
    private javax.swing.JButton startButton;
    private javax.swing.JButton stopButton;
    private javax.swing.JSpinner timeoutSpinner;
    private javax.swing.JTextField triggerTextField;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
